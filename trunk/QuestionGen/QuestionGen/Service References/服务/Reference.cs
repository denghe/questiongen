//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace QuestionGen.服务 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="服务.题")]
    public interface 题 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/知识面_插入", ReplyAction="urn:题/知识面_插入Response")]
        System.IAsyncResult Begin知识面_插入(byte[] 知识面, System.AsyncCallback callback, object asyncState);
        
        int End知识面_插入(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/知识面_删除", ReplyAction="urn:题/知识面_删除Response")]
        System.IAsyncResult Begin知识面_删除(byte[] 知识面, System.AsyncCallback callback, object asyncState);
        
        int End知识面_删除(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/知识面_更新", ReplyAction="urn:题/知识面_更新Response")]
        System.IAsyncResult Begin知识面_更新(byte[] 知识面, System.AsyncCallback callback, object asyncState);
        
        int End知识面_更新(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/题_插入", ReplyAction="urn:题/题_插入Response")]
        System.IAsyncResult Begin题_插入(byte[] 题, byte[] 选项, byte[] 答案, System.AsyncCallback callback, object asyncState);
        
        int End题_插入(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/知识面_获取", ReplyAction="urn:题/知识面_获取Response")]
        System.IAsyncResult Begin知识面_获取(byte[] 查询, System.AsyncCallback callback, object asyncState);
        
        byte[] End知识面_获取(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/题_获取", ReplyAction="urn:题/题_获取Response")]
        System.IAsyncResult Begin题_获取(byte[] 查询, System.AsyncCallback callback, object asyncState);
        
        byte[] End题_获取(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/题_选择_选项_获取", ReplyAction="urn:题/题_选择_选项_获取Response")]
        System.IAsyncResult Begin题_选择_选项_获取(byte[] 查询, System.AsyncCallback callback, object asyncState);
        
        byte[] End题_选择_选项_获取(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:题/题_选择_答案_获取", ReplyAction="urn:题/题_选择_答案_获取Response")]
        System.IAsyncResult Begin题_选择_答案_获取(byte[] 查询, System.AsyncCallback callback, object asyncState);
        
        byte[] End题_选择_答案_获取(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface 题Channel : QuestionGen.服务.题, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 知识面_插入CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 知识面_插入CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 知识面_删除CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 知识面_删除CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 知识面_更新CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 知识面_更新CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 题_插入CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 题_插入CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 知识面_获取CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 知识面_获取CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 题_获取CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 题_获取CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 题_选择_选项_获取CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 题_选择_选项_获取CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 题_选择_答案_获取CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 题_选择_答案_获取CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 题Client : System.ServiceModel.ClientBase<QuestionGen.服务.题>, QuestionGen.服务.题 {
        
        private BeginOperationDelegate onBegin知识面_插入Delegate;
        
        private EndOperationDelegate onEnd知识面_插入Delegate;
        
        private System.Threading.SendOrPostCallback on知识面_插入CompletedDelegate;
        
        private BeginOperationDelegate onBegin知识面_删除Delegate;
        
        private EndOperationDelegate onEnd知识面_删除Delegate;
        
        private System.Threading.SendOrPostCallback on知识面_删除CompletedDelegate;
        
        private BeginOperationDelegate onBegin知识面_更新Delegate;
        
        private EndOperationDelegate onEnd知识面_更新Delegate;
        
        private System.Threading.SendOrPostCallback on知识面_更新CompletedDelegate;
        
        private BeginOperationDelegate onBegin题_插入Delegate;
        
        private EndOperationDelegate onEnd题_插入Delegate;
        
        private System.Threading.SendOrPostCallback on题_插入CompletedDelegate;
        
        private BeginOperationDelegate onBegin知识面_获取Delegate;
        
        private EndOperationDelegate onEnd知识面_获取Delegate;
        
        private System.Threading.SendOrPostCallback on知识面_获取CompletedDelegate;
        
        private BeginOperationDelegate onBegin题_获取Delegate;
        
        private EndOperationDelegate onEnd题_获取Delegate;
        
        private System.Threading.SendOrPostCallback on题_获取CompletedDelegate;
        
        private BeginOperationDelegate onBegin题_选择_选项_获取Delegate;
        
        private EndOperationDelegate onEnd题_选择_选项_获取Delegate;
        
        private System.Threading.SendOrPostCallback on题_选择_选项_获取CompletedDelegate;
        
        private BeginOperationDelegate onBegin题_选择_答案_获取Delegate;
        
        private EndOperationDelegate onEnd题_选择_答案_获取Delegate;
        
        private System.Threading.SendOrPostCallback on题_选择_答案_获取CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public 题Client() {
        }
        
        public 题Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public 题Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public 题Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public 题Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<知识面_插入CompletedEventArgs> 知识面_插入Completed;
        
        public event System.EventHandler<知识面_删除CompletedEventArgs> 知识面_删除Completed;
        
        public event System.EventHandler<知识面_更新CompletedEventArgs> 知识面_更新Completed;
        
        public event System.EventHandler<题_插入CompletedEventArgs> 题_插入Completed;
        
        public event System.EventHandler<知识面_获取CompletedEventArgs> 知识面_获取Completed;
        
        public event System.EventHandler<题_获取CompletedEventArgs> 题_获取Completed;
        
        public event System.EventHandler<题_选择_选项_获取CompletedEventArgs> 题_选择_选项_获取Completed;
        
        public event System.EventHandler<题_选择_答案_获取CompletedEventArgs> 题_选择_答案_获取Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin知识面_插入(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin知识面_插入(知识面, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int QuestionGen.服务.题.End知识面_插入(System.IAsyncResult result) {
            return base.Channel.End知识面_插入(result);
        }
        
        private System.IAsyncResult OnBegin知识面_插入(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 知识面 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin知识面_插入(知识面, callback, asyncState);
        }
        
        private object[] OnEnd知识面_插入(System.IAsyncResult result) {
            int retVal = ((QuestionGen.服务.题)(this)).End知识面_插入(result);
            return new object[] {
                    retVal};
        }
        
        private void On知识面_插入Completed(object state) {
            if ((this.知识面_插入Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.知识面_插入Completed(this, new 知识面_插入CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 知识面_插入Async(byte[] 知识面) {
            this.知识面_插入Async(知识面, null);
        }
        
        public void 知识面_插入Async(byte[] 知识面, object userState) {
            if ((this.onBegin知识面_插入Delegate == null)) {
                this.onBegin知识面_插入Delegate = new BeginOperationDelegate(this.OnBegin知识面_插入);
            }
            if ((this.onEnd知识面_插入Delegate == null)) {
                this.onEnd知识面_插入Delegate = new EndOperationDelegate(this.OnEnd知识面_插入);
            }
            if ((this.on知识面_插入CompletedDelegate == null)) {
                this.on知识面_插入CompletedDelegate = new System.Threading.SendOrPostCallback(this.On知识面_插入Completed);
            }
            base.InvokeAsync(this.onBegin知识面_插入Delegate, new object[] {
                        知识面}, this.onEnd知识面_插入Delegate, this.on知识面_插入CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin知识面_删除(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin知识面_删除(知识面, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int QuestionGen.服务.题.End知识面_删除(System.IAsyncResult result) {
            return base.Channel.End知识面_删除(result);
        }
        
        private System.IAsyncResult OnBegin知识面_删除(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 知识面 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin知识面_删除(知识面, callback, asyncState);
        }
        
        private object[] OnEnd知识面_删除(System.IAsyncResult result) {
            int retVal = ((QuestionGen.服务.题)(this)).End知识面_删除(result);
            return new object[] {
                    retVal};
        }
        
        private void On知识面_删除Completed(object state) {
            if ((this.知识面_删除Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.知识面_删除Completed(this, new 知识面_删除CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 知识面_删除Async(byte[] 知识面) {
            this.知识面_删除Async(知识面, null);
        }
        
        public void 知识面_删除Async(byte[] 知识面, object userState) {
            if ((this.onBegin知识面_删除Delegate == null)) {
                this.onBegin知识面_删除Delegate = new BeginOperationDelegate(this.OnBegin知识面_删除);
            }
            if ((this.onEnd知识面_删除Delegate == null)) {
                this.onEnd知识面_删除Delegate = new EndOperationDelegate(this.OnEnd知识面_删除);
            }
            if ((this.on知识面_删除CompletedDelegate == null)) {
                this.on知识面_删除CompletedDelegate = new System.Threading.SendOrPostCallback(this.On知识面_删除Completed);
            }
            base.InvokeAsync(this.onBegin知识面_删除Delegate, new object[] {
                        知识面}, this.onEnd知识面_删除Delegate, this.on知识面_删除CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin知识面_更新(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin知识面_更新(知识面, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int QuestionGen.服务.题.End知识面_更新(System.IAsyncResult result) {
            return base.Channel.End知识面_更新(result);
        }
        
        private System.IAsyncResult OnBegin知识面_更新(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 知识面 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin知识面_更新(知识面, callback, asyncState);
        }
        
        private object[] OnEnd知识面_更新(System.IAsyncResult result) {
            int retVal = ((QuestionGen.服务.题)(this)).End知识面_更新(result);
            return new object[] {
                    retVal};
        }
        
        private void On知识面_更新Completed(object state) {
            if ((this.知识面_更新Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.知识面_更新Completed(this, new 知识面_更新CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 知识面_更新Async(byte[] 知识面) {
            this.知识面_更新Async(知识面, null);
        }
        
        public void 知识面_更新Async(byte[] 知识面, object userState) {
            if ((this.onBegin知识面_更新Delegate == null)) {
                this.onBegin知识面_更新Delegate = new BeginOperationDelegate(this.OnBegin知识面_更新);
            }
            if ((this.onEnd知识面_更新Delegate == null)) {
                this.onEnd知识面_更新Delegate = new EndOperationDelegate(this.OnEnd知识面_更新);
            }
            if ((this.on知识面_更新CompletedDelegate == null)) {
                this.on知识面_更新CompletedDelegate = new System.Threading.SendOrPostCallback(this.On知识面_更新Completed);
            }
            base.InvokeAsync(this.onBegin知识面_更新Delegate, new object[] {
                        知识面}, this.onEnd知识面_更新Delegate, this.on知识面_更新CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin题_插入(byte[] 题, byte[] 选项, byte[] 答案, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin题_插入(题, 选项, 答案, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int QuestionGen.服务.题.End题_插入(System.IAsyncResult result) {
            return base.Channel.End题_插入(result);
        }
        
        private System.IAsyncResult OnBegin题_插入(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 题 = ((byte[])(inValues[0]));
            byte[] 选项 = ((byte[])(inValues[1]));
            byte[] 答案 = ((byte[])(inValues[2]));
            return ((QuestionGen.服务.题)(this)).Begin题_插入(题, 选项, 答案, callback, asyncState);
        }
        
        private object[] OnEnd题_插入(System.IAsyncResult result) {
            int retVal = ((QuestionGen.服务.题)(this)).End题_插入(result);
            return new object[] {
                    retVal};
        }
        
        private void On题_插入Completed(object state) {
            if ((this.题_插入Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.题_插入Completed(this, new 题_插入CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 题_插入Async(byte[] 题, byte[] 选项, byte[] 答案) {
            this.题_插入Async(题, 选项, 答案, null);
        }
        
        public void 题_插入Async(byte[] 题, byte[] 选项, byte[] 答案, object userState) {
            if ((this.onBegin题_插入Delegate == null)) {
                this.onBegin题_插入Delegate = new BeginOperationDelegate(this.OnBegin题_插入);
            }
            if ((this.onEnd题_插入Delegate == null)) {
                this.onEnd题_插入Delegate = new EndOperationDelegate(this.OnEnd题_插入);
            }
            if ((this.on题_插入CompletedDelegate == null)) {
                this.on题_插入CompletedDelegate = new System.Threading.SendOrPostCallback(this.On题_插入Completed);
            }
            base.InvokeAsync(this.onBegin题_插入Delegate, new object[] {
                        题,
                        选项,
                        答案}, this.onEnd题_插入Delegate, this.on题_插入CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin知识面_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin知识面_获取(查询, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] QuestionGen.服务.题.End知识面_获取(System.IAsyncResult result) {
            return base.Channel.End知识面_获取(result);
        }
        
        private System.IAsyncResult OnBegin知识面_获取(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 查询 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin知识面_获取(查询, callback, asyncState);
        }
        
        private object[] OnEnd知识面_获取(System.IAsyncResult result) {
            byte[] retVal = ((QuestionGen.服务.题)(this)).End知识面_获取(result);
            return new object[] {
                    retVal};
        }
        
        private void On知识面_获取Completed(object state) {
            if ((this.知识面_获取Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.知识面_获取Completed(this, new 知识面_获取CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 知识面_获取Async(byte[] 查询) {
            this.知识面_获取Async(查询, null);
        }
        
        public void 知识面_获取Async(byte[] 查询, object userState) {
            if ((this.onBegin知识面_获取Delegate == null)) {
                this.onBegin知识面_获取Delegate = new BeginOperationDelegate(this.OnBegin知识面_获取);
            }
            if ((this.onEnd知识面_获取Delegate == null)) {
                this.onEnd知识面_获取Delegate = new EndOperationDelegate(this.OnEnd知识面_获取);
            }
            if ((this.on知识面_获取CompletedDelegate == null)) {
                this.on知识面_获取CompletedDelegate = new System.Threading.SendOrPostCallback(this.On知识面_获取Completed);
            }
            base.InvokeAsync(this.onBegin知识面_获取Delegate, new object[] {
                        查询}, this.onEnd知识面_获取Delegate, this.on知识面_获取CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin题_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin题_获取(查询, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] QuestionGen.服务.题.End题_获取(System.IAsyncResult result) {
            return base.Channel.End题_获取(result);
        }
        
        private System.IAsyncResult OnBegin题_获取(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 查询 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin题_获取(查询, callback, asyncState);
        }
        
        private object[] OnEnd题_获取(System.IAsyncResult result) {
            byte[] retVal = ((QuestionGen.服务.题)(this)).End题_获取(result);
            return new object[] {
                    retVal};
        }
        
        private void On题_获取Completed(object state) {
            if ((this.题_获取Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.题_获取Completed(this, new 题_获取CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 题_获取Async(byte[] 查询) {
            this.题_获取Async(查询, null);
        }
        
        public void 题_获取Async(byte[] 查询, object userState) {
            if ((this.onBegin题_获取Delegate == null)) {
                this.onBegin题_获取Delegate = new BeginOperationDelegate(this.OnBegin题_获取);
            }
            if ((this.onEnd题_获取Delegate == null)) {
                this.onEnd题_获取Delegate = new EndOperationDelegate(this.OnEnd题_获取);
            }
            if ((this.on题_获取CompletedDelegate == null)) {
                this.on题_获取CompletedDelegate = new System.Threading.SendOrPostCallback(this.On题_获取Completed);
            }
            base.InvokeAsync(this.onBegin题_获取Delegate, new object[] {
                        查询}, this.onEnd题_获取Delegate, this.on题_获取CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin题_选择_选项_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin题_选择_选项_获取(查询, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] QuestionGen.服务.题.End题_选择_选项_获取(System.IAsyncResult result) {
            return base.Channel.End题_选择_选项_获取(result);
        }
        
        private System.IAsyncResult OnBegin题_选择_选项_获取(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 查询 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin题_选择_选项_获取(查询, callback, asyncState);
        }
        
        private object[] OnEnd题_选择_选项_获取(System.IAsyncResult result) {
            byte[] retVal = ((QuestionGen.服务.题)(this)).End题_选择_选项_获取(result);
            return new object[] {
                    retVal};
        }
        
        private void On题_选择_选项_获取Completed(object state) {
            if ((this.题_选择_选项_获取Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.题_选择_选项_获取Completed(this, new 题_选择_选项_获取CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 题_选择_选项_获取Async(byte[] 查询) {
            this.题_选择_选项_获取Async(查询, null);
        }
        
        public void 题_选择_选项_获取Async(byte[] 查询, object userState) {
            if ((this.onBegin题_选择_选项_获取Delegate == null)) {
                this.onBegin题_选择_选项_获取Delegate = new BeginOperationDelegate(this.OnBegin题_选择_选项_获取);
            }
            if ((this.onEnd题_选择_选项_获取Delegate == null)) {
                this.onEnd题_选择_选项_获取Delegate = new EndOperationDelegate(this.OnEnd题_选择_选项_获取);
            }
            if ((this.on题_选择_选项_获取CompletedDelegate == null)) {
                this.on题_选择_选项_获取CompletedDelegate = new System.Threading.SendOrPostCallback(this.On题_选择_选项_获取Completed);
            }
            base.InvokeAsync(this.onBegin题_选择_选项_获取Delegate, new object[] {
                        查询}, this.onEnd题_选择_选项_获取Delegate, this.on题_选择_选项_获取CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult QuestionGen.服务.题.Begin题_选择_答案_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin题_选择_答案_获取(查询, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] QuestionGen.服务.题.End题_选择_答案_获取(System.IAsyncResult result) {
            return base.Channel.End题_选择_答案_获取(result);
        }
        
        private System.IAsyncResult OnBegin题_选择_答案_获取(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] 查询 = ((byte[])(inValues[0]));
            return ((QuestionGen.服务.题)(this)).Begin题_选择_答案_获取(查询, callback, asyncState);
        }
        
        private object[] OnEnd题_选择_答案_获取(System.IAsyncResult result) {
            byte[] retVal = ((QuestionGen.服务.题)(this)).End题_选择_答案_获取(result);
            return new object[] {
                    retVal};
        }
        
        private void On题_选择_答案_获取Completed(object state) {
            if ((this.题_选择_答案_获取Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.题_选择_答案_获取Completed(this, new 题_选择_答案_获取CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 题_选择_答案_获取Async(byte[] 查询) {
            this.题_选择_答案_获取Async(查询, null);
        }
        
        public void 题_选择_答案_获取Async(byte[] 查询, object userState) {
            if ((this.onBegin题_选择_答案_获取Delegate == null)) {
                this.onBegin题_选择_答案_获取Delegate = new BeginOperationDelegate(this.OnBegin题_选择_答案_获取);
            }
            if ((this.onEnd题_选择_答案_获取Delegate == null)) {
                this.onEnd题_选择_答案_获取Delegate = new EndOperationDelegate(this.OnEnd题_选择_答案_获取);
            }
            if ((this.on题_选择_答案_获取CompletedDelegate == null)) {
                this.on题_选择_答案_获取CompletedDelegate = new System.Threading.SendOrPostCallback(this.On题_选择_答案_获取Completed);
            }
            base.InvokeAsync(this.onBegin题_选择_答案_获取Delegate, new object[] {
                        查询}, this.onEnd题_选择_答案_获取Delegate, this.on题_选择_答案_获取CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override QuestionGen.服务.题 CreateChannel() {
            return new 题ClientChannel(this);
        }
        
        private class 题ClientChannel : ChannelBase<QuestionGen.服务.题>, QuestionGen.服务.题 {
            
            public 题ClientChannel(System.ServiceModel.ClientBase<QuestionGen.服务.题> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult Begin知识面_插入(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 知识面;
                System.IAsyncResult _result = base.BeginInvoke("知识面_插入", _args, callback, asyncState);
                return _result;
            }
            
            public int End知识面_插入(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("知识面_插入", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin知识面_删除(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 知识面;
                System.IAsyncResult _result = base.BeginInvoke("知识面_删除", _args, callback, asyncState);
                return _result;
            }
            
            public int End知识面_删除(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("知识面_删除", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin知识面_更新(byte[] 知识面, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 知识面;
                System.IAsyncResult _result = base.BeginInvoke("知识面_更新", _args, callback, asyncState);
                return _result;
            }
            
            public int End知识面_更新(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("知识面_更新", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin题_插入(byte[] 题, byte[] 选项, byte[] 答案, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = 题;
                _args[1] = 选项;
                _args[2] = 答案;
                System.IAsyncResult _result = base.BeginInvoke("题_插入", _args, callback, asyncState);
                return _result;
            }
            
            public int End题_插入(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("题_插入", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin知识面_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 查询;
                System.IAsyncResult _result = base.BeginInvoke("知识面_获取", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] End知识面_获取(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("知识面_获取", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin题_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 查询;
                System.IAsyncResult _result = base.BeginInvoke("题_获取", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] End题_获取(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("题_获取", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin题_选择_选项_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 查询;
                System.IAsyncResult _result = base.BeginInvoke("题_选择_选项_获取", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] End题_选择_选项_获取(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("题_选择_选项_获取", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin题_选择_答案_获取(byte[] 查询, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = 查询;
                System.IAsyncResult _result = base.BeginInvoke("题_选择_答案_获取", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] End题_选择_答案_获取(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("题_选择_答案_获取", _args, result)));
                return _result;
            }
        }
    }
}
